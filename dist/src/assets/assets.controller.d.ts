import { AssetsService } from './assets.service';
import { CreateAssetDto, UpdateAssetDto, AssetSearchDto, BatchAssetOperationDto } from './dto/assets.dto';
import { PaginationDto } from '../common/dto/pagination.dto';
export declare class AssetsController {
    private readonly assetsService;
    constructor(assetsService: AssetsService);
    create(createAssetDto: CreateAssetDto, req: any): Promise<{
        client: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            tenantId: string;
            company: string | null;
            industry: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            goals: import("@prisma/client/runtime/library").JsonValue | null;
        };
        project: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            budget: number | null;
            type: string;
            status: import(".prisma/client").$Enums.ProjectStatus;
            notes: string | null;
            startDate: Date | null;
            endDate: Date | null;
            deliverables: import("@prisma/client/runtime/library").JsonValue | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
        };
        uploader: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            role: import(".prisma/client").$Enums.Role;
            tenantId: string;
        };
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        description: string | null;
        clientId: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        type: import(".prisma/client").$Enums.AssetType;
        fileUrl: string;
        fileSize: number;
        status: import(".prisma/client").$Enums.AssetStatus;
        tags: string[];
        notes: string | null;
        thumbnailUrl: string | null;
        originalUrl: string | null;
        dimensions: import("@prisma/client/runtime/library").JsonValue | null;
        duration: number | null;
        projectId: string | null;
        aiTags: string[];
        qualityScore: number | null;
        approvedAt: Date | null;
        archivedAt: Date | null;
        uploadedBy: string;
    }>;
    uploadAsset(file: Express.Multer.File, assetData: any, req: any): Promise<{
        client: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            tenantId: string;
            company: string | null;
            industry: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            goals: import("@prisma/client/runtime/library").JsonValue | null;
        };
        project: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            budget: number | null;
            type: string;
            status: import(".prisma/client").$Enums.ProjectStatus;
            notes: string | null;
            startDate: Date | null;
            endDate: Date | null;
            deliverables: import("@prisma/client/runtime/library").JsonValue | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
        };
        uploader: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            role: import(".prisma/client").$Enums.Role;
            tenantId: string;
        };
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        description: string | null;
        clientId: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        type: import(".prisma/client").$Enums.AssetType;
        fileUrl: string;
        fileSize: number;
        status: import(".prisma/client").$Enums.AssetStatus;
        tags: string[];
        notes: string | null;
        thumbnailUrl: string | null;
        originalUrl: string | null;
        dimensions: import("@prisma/client/runtime/library").JsonValue | null;
        duration: number | null;
        projectId: string | null;
        aiTags: string[];
        qualityScore: number | null;
        approvedAt: Date | null;
        archivedAt: Date | null;
        uploadedBy: string;
    }>;
    findAll(pagination: PaginationDto, req: any): Promise<{
        data: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            description: string | null;
            clientId: string | null;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            type: import(".prisma/client").$Enums.AssetType;
            fileUrl: string;
            fileSize: number;
            status: import(".prisma/client").$Enums.AssetStatus;
            tags: string[];
            notes: string | null;
            thumbnailUrl: string | null;
            originalUrl: string | null;
            dimensions: import("@prisma/client/runtime/library").JsonValue | null;
            duration: number | null;
            projectId: string | null;
            aiTags: string[];
            qualityScore: number | null;
            approvedAt: Date | null;
            archivedAt: Date | null;
            uploadedBy: string;
        }[];
        meta: {
            page: number;
            limit: number;
            total: number;
            totalPages: number;
        };
    }>;
    search(searchDto: AssetSearchDto, req: any): Promise<({
        client: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            tenantId: string;
            company: string | null;
            industry: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            goals: import("@prisma/client/runtime/library").JsonValue | null;
        };
        project: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            budget: number | null;
            type: string;
            status: import(".prisma/client").$Enums.ProjectStatus;
            notes: string | null;
            startDate: Date | null;
            endDate: Date | null;
            deliverables: import("@prisma/client/runtime/library").JsonValue | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
        };
        uploader: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            role: import(".prisma/client").$Enums.Role;
            tenantId: string;
        };
        optimizations: {
            id: string;
            createdAt: Date;
            fileUrl: string;
            fileSize: number;
            status: string;
            format: string;
            dimensions: import("@prisma/client/runtime/library").JsonValue | null;
            platform: import(".prisma/client").$Enums.PlatformType;
            assetId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        description: string | null;
        clientId: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        type: import(".prisma/client").$Enums.AssetType;
        fileUrl: string;
        fileSize: number;
        status: import(".prisma/client").$Enums.AssetStatus;
        tags: string[];
        notes: string | null;
        thumbnailUrl: string | null;
        originalUrl: string | null;
        dimensions: import("@prisma/client/runtime/library").JsonValue | null;
        duration: number | null;
        projectId: string | null;
        aiTags: string[];
        qualityScore: number | null;
        approvedAt: Date | null;
        archivedAt: Date | null;
        uploadedBy: string;
    })[]>;
    findOne(id: string, req: any): Promise<{
        deployments: ({
            asset: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                tenantId: string;
                description: string | null;
                clientId: string | null;
                metadata: import("@prisma/client/runtime/library").JsonValue | null;
                type: import(".prisma/client").$Enums.AssetType;
                fileUrl: string;
                fileSize: number;
                status: import(".prisma/client").$Enums.AssetStatus;
                tags: string[];
                notes: string | null;
                thumbnailUrl: string | null;
                originalUrl: string | null;
                dimensions: import("@prisma/client/runtime/library").JsonValue | null;
                duration: number | null;
                projectId: string | null;
                aiTags: string[];
                qualityScore: number | null;
                approvedAt: Date | null;
                archivedAt: Date | null;
                uploadedBy: string;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            status: import(".prisma/client").$Enums.DeploymentStatus;
            platform: import(".prisma/client").$Enums.PlatformType;
            assetId: string;
            scheduledAt: Date | null;
            caption: string | null;
            hashtags: string[];
            publishedAt: Date | null;
            postUrl: string | null;
            postId: string | null;
            performance: import("@prisma/client/runtime/library").JsonValue | null;
        })[];
        client: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            tenantId: string;
            company: string | null;
            industry: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            goals: import("@prisma/client/runtime/library").JsonValue | null;
        };
        project: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            budget: number | null;
            type: string;
            status: import(".prisma/client").$Enums.ProjectStatus;
            notes: string | null;
            startDate: Date | null;
            endDate: Date | null;
            deliverables: import("@prisma/client/runtime/library").JsonValue | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
        };
        uploader: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            role: import(".prisma/client").$Enums.Role;
            tenantId: string;
        };
        optimizations: {
            id: string;
            createdAt: Date;
            fileUrl: string;
            fileSize: number;
            status: string;
            format: string;
            dimensions: import("@prisma/client/runtime/library").JsonValue | null;
            platform: import(".prisma/client").$Enums.PlatformType;
            assetId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        description: string | null;
        clientId: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        type: import(".prisma/client").$Enums.AssetType;
        fileUrl: string;
        fileSize: number;
        status: import(".prisma/client").$Enums.AssetStatus;
        tags: string[];
        notes: string | null;
        thumbnailUrl: string | null;
        originalUrl: string | null;
        dimensions: import("@prisma/client/runtime/library").JsonValue | null;
        duration: number | null;
        projectId: string | null;
        aiTags: string[];
        qualityScore: number | null;
        approvedAt: Date | null;
        archivedAt: Date | null;
        uploadedBy: string;
    }>;
    getOptimizations(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        fileUrl: string;
        fileSize: number;
        status: string;
        format: string;
        dimensions: import("@prisma/client/runtime/library").JsonValue | null;
        platform: import(".prisma/client").$Enums.PlatformType;
        assetId: string;
    }[]>;
    generateOptimizations(id: string, req: any): Promise<any[]>;
    update(id: string, updateAssetDto: UpdateAssetDto, req: any): Promise<{
        client: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            tenantId: string;
            company: string | null;
            industry: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            goals: import("@prisma/client/runtime/library").JsonValue | null;
        };
        project: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            budget: number | null;
            type: string;
            status: import(".prisma/client").$Enums.ProjectStatus;
            notes: string | null;
            startDate: Date | null;
            endDate: Date | null;
            deliverables: import("@prisma/client/runtime/library").JsonValue | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
        };
        uploader: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            role: import(".prisma/client").$Enums.Role;
            tenantId: string;
        };
        optimizations: {
            id: string;
            createdAt: Date;
            fileUrl: string;
            fileSize: number;
            status: string;
            format: string;
            dimensions: import("@prisma/client/runtime/library").JsonValue | null;
            platform: import(".prisma/client").$Enums.PlatformType;
            assetId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        description: string | null;
        clientId: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        type: import(".prisma/client").$Enums.AssetType;
        fileUrl: string;
        fileSize: number;
        status: import(".prisma/client").$Enums.AssetStatus;
        tags: string[];
        notes: string | null;
        thumbnailUrl: string | null;
        originalUrl: string | null;
        dimensions: import("@prisma/client/runtime/library").JsonValue | null;
        duration: number | null;
        projectId: string | null;
        aiTags: string[];
        qualityScore: number | null;
        approvedAt: Date | null;
        archivedAt: Date | null;
        uploadedBy: string;
    }>;
    remove(id: string, req: any): Promise<{
        message: string;
    }>;
    batchOperation(batchDto: BatchAssetOperationDto, req: any): Promise<{
        message: string;
    }>;
}
