import { ProjectsService } from './projects.service';
import { CreateProjectDto, UpdateProjectDto } from '../assets/dto/assets.dto';
import { PaginationDto } from '../common/dto/pagination.dto';
export declare class ProjectsController {
    private readonly projectsService;
    constructor(projectsService: ProjectsService);
    create(createProjectDto: CreateProjectDto, req: any): Promise<{
        assets: ({
            uploader: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                password: string;
                role: import(".prisma/client").$Enums.Role;
                tenantId: string;
            };
        } & {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            description: string | null;
            clientId: string | null;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            type: import(".prisma/client").$Enums.AssetType;
            fileUrl: string;
            fileSize: number;
            status: import(".prisma/client").$Enums.AssetStatus;
            tags: string[];
            notes: string | null;
            thumbnailUrl: string | null;
            originalUrl: string | null;
            dimensions: import("@prisma/client/runtime/library").JsonValue | null;
            duration: number | null;
            projectId: string | null;
            aiTags: string[];
            qualityScore: number | null;
            approvedAt: Date | null;
            archivedAt: Date | null;
            uploadedBy: string;
        })[];
        creator: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            role: import(".prisma/client").$Enums.Role;
            tenantId: string;
        };
        brand: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            website: string | null;
            logoUrl: string | null;
            palette: import("@prisma/client/runtime/library").JsonValue | null;
            fonts: import("@prisma/client/runtime/library").JsonValue | null;
            createdBy: string;
        };
        client: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            tenantId: string;
            company: string | null;
            industry: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            goals: import("@prisma/client/runtime/library").JsonValue | null;
        };
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        budget: number | null;
        type: string;
        status: import(".prisma/client").$Enums.ProjectStatus;
        notes: string | null;
        startDate: Date | null;
        endDate: Date | null;
        deliverables: import("@prisma/client/runtime/library").JsonValue | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    findAll(pagination: PaginationDto, req: any): Promise<{
        data: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            budget: number | null;
            type: string;
            status: import(".prisma/client").$Enums.ProjectStatus;
            notes: string | null;
            startDate: Date | null;
            endDate: Date | null;
            deliverables: import("@prisma/client/runtime/library").JsonValue | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
        meta: {
            page: number;
            limit: number;
            total: number;
            totalPages: number;
        };
    }>;
    findOne(id: string, req: any): Promise<{
        assets: ({
            deployments: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                tenantId: string;
                createdBy: string;
                metadata: import("@prisma/client/runtime/library").JsonValue | null;
                status: import(".prisma/client").$Enums.DeploymentStatus;
                platform: import(".prisma/client").$Enums.PlatformType;
                assetId: string;
                scheduledAt: Date | null;
                caption: string | null;
                hashtags: string[];
                publishedAt: Date | null;
                postUrl: string | null;
                postId: string | null;
                performance: import("@prisma/client/runtime/library").JsonValue | null;
            }[];
            uploader: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                password: string;
                role: import(".prisma/client").$Enums.Role;
                tenantId: string;
            };
            optimizations: {
                id: string;
                createdAt: Date;
                fileUrl: string;
                fileSize: number;
                status: string;
                format: string;
                dimensions: import("@prisma/client/runtime/library").JsonValue | null;
                platform: import(".prisma/client").$Enums.PlatformType;
                assetId: string;
            }[];
        } & {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            description: string | null;
            clientId: string | null;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            type: import(".prisma/client").$Enums.AssetType;
            fileUrl: string;
            fileSize: number;
            status: import(".prisma/client").$Enums.AssetStatus;
            tags: string[];
            notes: string | null;
            thumbnailUrl: string | null;
            originalUrl: string | null;
            dimensions: import("@prisma/client/runtime/library").JsonValue | null;
            duration: number | null;
            projectId: string | null;
            aiTags: string[];
            qualityScore: number | null;
            approvedAt: Date | null;
            archivedAt: Date | null;
            uploadedBy: string;
        })[];
        creator: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            role: import(".prisma/client").$Enums.Role;
            tenantId: string;
        };
        brand: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            website: string | null;
            logoUrl: string | null;
            palette: import("@prisma/client/runtime/library").JsonValue | null;
            fonts: import("@prisma/client/runtime/library").JsonValue | null;
            createdBy: string;
        };
        client: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            tenantId: string;
            company: string | null;
            industry: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            goals: import("@prisma/client/runtime/library").JsonValue | null;
        };
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        budget: number | null;
        type: string;
        status: import(".prisma/client").$Enums.ProjectStatus;
        notes: string | null;
        startDate: Date | null;
        endDate: Date | null;
        deliverables: import("@prisma/client/runtime/library").JsonValue | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getProjectAssets(id: string, req: any): Promise<({
        deployments: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            status: import(".prisma/client").$Enums.DeploymentStatus;
            platform: import(".prisma/client").$Enums.PlatformType;
            assetId: string;
            scheduledAt: Date | null;
            caption: string | null;
            hashtags: string[];
            publishedAt: Date | null;
            postUrl: string | null;
            postId: string | null;
            performance: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
        uploader: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            password: string;
            role: import(".prisma/client").$Enums.Role;
            tenantId: string;
        };
        optimizations: {
            id: string;
            createdAt: Date;
            fileUrl: string;
            fileSize: number;
            status: string;
            format: string;
            dimensions: import("@prisma/client/runtime/library").JsonValue | null;
            platform: import(".prisma/client").$Enums.PlatformType;
            assetId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        description: string | null;
        clientId: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        type: import(".prisma/client").$Enums.AssetType;
        fileUrl: string;
        fileSize: number;
        status: import(".prisma/client").$Enums.AssetStatus;
        tags: string[];
        notes: string | null;
        thumbnailUrl: string | null;
        originalUrl: string | null;
        dimensions: import("@prisma/client/runtime/library").JsonValue | null;
        duration: number | null;
        projectId: string | null;
        aiTags: string[];
        qualityScore: number | null;
        approvedAt: Date | null;
        archivedAt: Date | null;
        uploadedBy: string;
    })[]>;
    getProjectStats(id: string, req: any): Promise<{
        projectId: string;
        totalAssets: number;
        totalDeployments: number;
        assetsByType: {};
        assetsByStatus: {};
        timeline: {
            startDate: Date;
            endDate: Date;
            status: import(".prisma/client").$Enums.ProjectStatus;
        };
    }>;
    update(id: string, updateProjectDto: UpdateProjectDto, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        budget: number | null;
        type: string;
        status: import(".prisma/client").$Enums.ProjectStatus;
        notes: string | null;
        startDate: Date | null;
        endDate: Date | null;
        deliverables: import("@prisma/client/runtime/library").JsonValue | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    remove(id: string, req: any): Promise<{
        message: string;
    }>;
}
