import { PrismaService } from '../common/prisma.service';
import { CreateCampaignDto, UpdateCampaignDto } from './dto/campaigns.dto';
import { PaginationDto, PaginatedResponseDto } from '../common/dto/pagination.dto';
import { CampaignAiService } from './campaign.ai.service';
import { CampaignAnalyticsService } from './campaign.analytics.service';
import { CampaignTemplatesService } from './campaign.templates.service';
export declare class CampaignsService {
    private readonly prisma;
    private readonly campaignAiService;
    private readonly campaignAnalyticsService;
    private readonly campaignTemplatesService;
    constructor(prisma: PrismaService, campaignAiService: CampaignAiService, campaignAnalyticsService: CampaignAnalyticsService, campaignTemplatesService: CampaignTemplatesService);
    createCampaign(createCampaignDto: CreateCampaignDto, tenantId: string, userId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getCampaigns(tenantId: string, pagination: PaginationDto): Promise<PaginatedResponseDto<any>>;
    getCampaign(id: string, tenantId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    updateCampaign(id: string, updateCampaignDto: UpdateCampaignDto, tenantId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    deleteCampaign(id: string, tenantId: string): Promise<{
        message: string;
    }>;
    launchCampaign(id: string, tenantId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    pauseCampaign(id: string, tenantId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    resumeCampaign(id: string, tenantId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    completeCampaign(id: string, tenantId: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    duplicateCampaign(id: string, tenantId: string, duplicateData: {
        name: string;
        description?: string;
    }): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getCampaignStats(tenantId: string): Promise<{
        totalCampaigns: number;
        statusBreakdown: {};
        typeBreakdown: {};
        goalBreakdown: {};
    }>;
    getClientCampaigns(clientId: string, tenantId: string, pagination: PaginationDto): Promise<PaginatedResponseDto<any>>;
    getBrandCampaigns(brandId: string, tenantId: string, pagination: PaginationDto): Promise<PaginatedResponseDto<any>>;
}
