import { CampaignsService } from './campaigns.service';
import { CampaignAiService } from './campaign.ai.service';
import { CampaignAnalyticsService } from './campaign.analytics.service';
import { CampaignTemplatesService } from './campaign.templates.service';
import { CreateCampaignDto, UpdateCampaignDto, GenerateCampaignDto, CampaignTemplateDto, CampaignKpiDto, CampaignAnalyticsDto } from './dto/campaigns.dto';
import { PaginationDto } from '../common/dto/pagination.dto';
export declare class CampaignsController {
    private readonly campaignsService;
    private readonly campaignAiService;
    private readonly campaignAnalyticsService;
    private readonly campaignTemplatesService;
    constructor(campaignsService: CampaignsService, campaignAiService: CampaignAiService, campaignAnalyticsService: CampaignAnalyticsService, campaignTemplatesService: CampaignTemplatesService);
    createCampaign(createCampaignDto: CreateCampaignDto, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getCampaigns(pagination: PaginationDto, req: any): Promise<import("../common/dto/pagination.dto").PaginatedResponseDto<any>>;
    getCampaign(id: string, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    updateCampaign(id: string, updateCampaignDto: UpdateCampaignDto, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    deleteCampaign(id: string, req: any): Promise<{
        message: string;
    }>;
    launchCampaign(id: string, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    pauseCampaign(id: string, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    resumeCampaign(id: string, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    completeCampaign(id: string, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    duplicateCampaign(id: string, duplicateData: {
        name: string;
        description?: string;
    }, req: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        createdBy: string;
        description: string | null;
        brandId: string | null;
        clientId: string | null;
        targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
        budget: number | null;
        type: import(".prisma/client").$Enums.CampaignType;
        status: import(".prisma/client").$Enums.CampaignStatus;
        strategy: import("@prisma/client/runtime/library").JsonValue | null;
        startDate: Date | null;
        endDate: Date | null;
        timeline: import("@prisma/client/runtime/library").JsonValue | null;
        goal: import(".prisma/client").$Enums.CampaignGoal;
        contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
        kpis: import("@prisma/client/runtime/library").JsonValue | null;
        recommendations: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    generateCampaign(generateDto: GenerateCampaignDto, req: any): Promise<{
        success: boolean;
        campaignPlan: any;
        savedPlanId: any;
        message: string;
    }>;
    generateAssets(id: string, body: {
        assetType: string;
        context?: any;
    }, req: any): Promise<{
        success: boolean;
        assets: string;
        assetType: string;
        campaignId: string;
    }>;
    optimizeContent(id: string, body: {
        content: string;
        optimizationType: string;
    }, req: any): Promise<{
        success: boolean;
        originalContent: string;
        optimizedContent: string;
        optimizationType: string;
        campaignId: string;
    }>;
    trackKpi(id: string, kpiDto: CampaignKpiDto, req: any): Promise<any>;
    trackAnalytics(id: string, analyticsDto: CampaignAnalyticsDto, req: any): Promise<any>;
    getCampaignPerformance(id: string, startDate?: string, endDate?: string, req: any): Promise<{
        campaign: {
            brand: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                tenantId: string;
                website: string | null;
                logoUrl: string | null;
                palette: import("@prisma/client/runtime/library").JsonValue | null;
                fonts: import("@prisma/client/runtime/library").JsonValue | null;
                createdBy: string;
            };
            client: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                tenantId: string;
                company: string | null;
                industry: string | null;
                targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
                budget: number | null;
                goals: import("@prisma/client/runtime/library").JsonValue | null;
            };
        } & {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            type: import(".prisma/client").$Enums.CampaignType;
            status: import(".prisma/client").$Enums.CampaignStatus;
            strategy: import("@prisma/client/runtime/library").JsonValue | null;
            startDate: Date | null;
            endDate: Date | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
            goal: import(".prisma/client").$Enums.CampaignGoal;
            contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
            kpis: import("@prisma/client/runtime/library").JsonValue | null;
            recommendations: import("@prisma/client/runtime/library").JsonValue | null;
        };
        analytics: any;
        kpis: any;
        performance: any;
        dateRange: {
            start: Date;
            end: Date;
        };
    }>;
    generateReport(id: string, type: 'daily' | 'weekly' | 'monthly', req: any): Promise<{
        campaign: {
            brand: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                tenantId: string;
                website: string | null;
                logoUrl: string | null;
                palette: import("@prisma/client/runtime/library").JsonValue | null;
                fonts: import("@prisma/client/runtime/library").JsonValue | null;
                createdBy: string;
            };
            client: {
                id: string;
                name: string;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                tenantId: string;
                company: string | null;
                industry: string | null;
                targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
                budget: number | null;
                goals: import("@prisma/client/runtime/library").JsonValue | null;
            };
        } & {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            type: import(".prisma/client").$Enums.CampaignType;
            status: import(".prisma/client").$Enums.CampaignStatus;
            strategy: import("@prisma/client/runtime/library").JsonValue | null;
            startDate: Date | null;
            endDate: Date | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
            goal: import(".prisma/client").$Enums.CampaignGoal;
            contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
            kpis: import("@prisma/client/runtime/library").JsonValue | null;
            recommendations: import("@prisma/client/runtime/library").JsonValue | null;
        };
        report: any;
        dateRange: {
            start: Date;
            end: Date;
        };
        reportType: "daily" | "weekly" | "monthly";
    }>;
    getTemplates(type?: string, goal?: string, category?: string): Promise<any>;
    getTemplateSuggestions(goal: string, type?: string, budget?: number): Promise<any>;
    createTemplate(templateDto: CampaignTemplateDto): Promise<any>;
    getTemplate(id: string): Promise<any>;
    updateTemplate(id: string, templateDto: Partial<CampaignTemplateDto>): Promise<any>;
    deleteTemplate(id: string): Promise<any>;
    getSuggestions(clientId: string, brandId: string, req: any): Promise<{
        success: boolean;
        suggestions: any[];
        performanceAnalysis: any;
    }>;
    getCampaignStats(req: any): Promise<{
        totalCampaigns: number;
        statusBreakdown: {};
        typeBreakdown: {};
        goalBreakdown: {};
    }>;
    getPerformanceInsights(startDate?: string, endDate?: string, req: any): Promise<{
        performance: {
            aggregatePerformance: any;
            topCampaigns: {
                id: string;
                name: string;
                brand: any;
                client: any;
                performance: any;
            }[];
            totalCampaigns: number;
            activeCampaigns: number;
            dateRange: {
                start: Date;
                end: Date;
            };
        };
        insights: any[];
        dateRange: {
            start: Date;
            end: Date;
        };
    }>;
    getClientCampaigns(clientId: string, pagination: PaginationDto, req: any): Promise<import("../common/dto/pagination.dto").PaginatedResponseDto<any>>;
    getBrandCampaigns(brandId: string, pagination: PaginationDto, req: any): Promise<import("../common/dto/pagination.dto").PaginatedResponseDto<any>>;
    getClientPerformance(clientId: string, startDate?: string, endDate?: string, req: any): Promise<{
        client: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            tenantId: string;
            company: string | null;
            industry: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            goals: import("@prisma/client/runtime/library").JsonValue | null;
        };
        campaigns: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            createdBy: string;
            description: string | null;
            brandId: string | null;
            clientId: string | null;
            targetAudience: import("@prisma/client/runtime/library").JsonValue | null;
            budget: number | null;
            type: import(".prisma/client").$Enums.CampaignType;
            status: import(".prisma/client").$Enums.CampaignStatus;
            strategy: import("@prisma/client/runtime/library").JsonValue | null;
            startDate: Date | null;
            endDate: Date | null;
            timeline: import("@prisma/client/runtime/library").JsonValue | null;
            goal: import(".prisma/client").$Enums.CampaignGoal;
            contentDeliverables: import("@prisma/client/runtime/library").JsonValue | null;
            kpis: import("@prisma/client/runtime/library").JsonValue | null;
            recommendations: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
        performance: any;
        dateRange: {
            start: Date;
            end: Date;
        };
    }>;
    seedDefaultTemplates(): Promise<void>;
}
