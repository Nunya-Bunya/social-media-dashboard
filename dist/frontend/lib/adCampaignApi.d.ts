import { AdCampaign, AdCreative, AdAnalytics, SplitTest, SalesFunnel, Integration, CreateAdCampaignRequest, UpdateAdCampaignRequest, CreateAdCreativeRequest, UpdateAdCreativeRequest, TrackAdAnalyticsRequest, CreateSplitTestRequest, UpdateSplitTestRequest, CreateSalesFunnelRequest, UpdateSalesFunnelRequest, CreateIntegrationRequest, UpdateIntegrationRequest, AnalyticsOverviewRequest, SyncAnalyticsRequest, AnalyticsOverview, AdCampaignStats, SyncAnalyticsResponse, AdCampaignFilters, AdCreativeFilters, SplitTestFilters, SalesFunnelFilters, PaginatedResponse, TestVariant } from '../types/ad-campaigns';
declare class AdCampaignApi {
    private request;
    createAdCampaign(data: CreateAdCampaignRequest): Promise<AdCampaign>;
    getAdCampaigns(filters?: AdCampaignFilters): Promise<PaginatedResponse<AdCampaign>>;
    getAdCampaign(id: string): Promise<AdCampaign>;
    updateAdCampaign(id: string, data: UpdateAdCampaignRequest): Promise<AdCampaign>;
    deleteAdCampaign(id: string): Promise<void>;
    launchAdCampaign(id: string): Promise<AdCampaign>;
    pauseAdCampaign(id: string): Promise<AdCampaign>;
    duplicateAdCampaign(id: string): Promise<AdCampaign>;
    createAdCreative(data: CreateAdCreativeRequest): Promise<AdCreative>;
    getAdCreatives(filters?: AdCreativeFilters): Promise<PaginatedResponse<AdCreative>>;
    getAdCreative(id: string): Promise<AdCreative>;
    updateAdCreative(id: string, data: UpdateAdCreativeRequest): Promise<AdCreative>;
    deleteAdCreative(id: string): Promise<void>;
    trackAdAnalytics(campaignId: string, data: TrackAdAnalyticsRequest): Promise<AdAnalytics>;
    getAdAnalytics(campaignId: string, filters?: any): Promise<PaginatedResponse<AdAnalytics>>;
    getAnalyticsOverview(data: AnalyticsOverviewRequest): Promise<AnalyticsOverview>;
    createSplitTest(data: CreateSplitTestRequest): Promise<SplitTest>;
    getSplitTests(filters?: SplitTestFilters): Promise<PaginatedResponse<SplitTest>>;
    getSplitTest(id: string): Promise<SplitTest>;
    updateSplitTest(id: string, data: UpdateSplitTestRequest): Promise<SplitTest>;
    declareWinner(id: string, winner: TestVariant): Promise<SplitTest>;
    createSalesFunnel(data: CreateSalesFunnelRequest): Promise<SalesFunnel>;
    getSalesFunnels(filters?: SalesFunnelFilters): Promise<PaginatedResponse<SalesFunnel>>;
    getSalesFunnel(id: string): Promise<SalesFunnel>;
    updateSalesFunnel(id: string, data: UpdateSalesFunnelRequest): Promise<SalesFunnel>;
    deleteSalesFunnel(id: string): Promise<void>;
    createIntegration(data: CreateIntegrationRequest): Promise<Integration>;
    getIntegrations(): Promise<Integration[]>;
    getIntegration(id: string): Promise<Integration>;
    updateIntegration(id: string, data: UpdateIntegrationRequest): Promise<Integration>;
    deleteIntegration(id: string): Promise<void>;
    syncAnalytics(data: SyncAnalyticsRequest): Promise<SyncAnalyticsResponse>;
    getAdCampaignStats(): Promise<AdCampaignStats>;
    uploadMedia(file: File, onProgress?: (progress: number) => void): Promise<{
        url: string;
    }>;
}
export declare const adCampaignApi: AdCampaignApi;
export {};
