generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  settings  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users           User[]
  brands          Brand[]
  clients         Client[]
  aiAssistants    AIAssistant[]
  chatSessions    ChatSession[]
  businessDocuments BusinessDocument[]
  aiTasks         AITask[]
  leadAgents      LeadAgent[]
  leads           Lead[]
  notifications   LeadNotification[]
  scrapeJobs      ScrapeJob[]
  businessLeads   BusinessLead[]
  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  aiAssistants  AIAssistant[]
  chatSessions  ChatSession[]
  aiTasks       AITask[]
  leads         Lead[]
  notifications LeadNotification[]
  leadAgents    LeadAgent[]
  scrapeJobs    ScrapeJob[]
  businessLeads BusinessLead[]
  @@map("users")
}

model AIAssistant {
  id          String   @id @default(cuid())
  name        String
  description String?
  businessType String
  prompt      String
  settings    String?
  isActive    Boolean  @default(true)
  brandId     String?
  clientId    String?
  createdBy   String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand     Brand?    @relation(fields: [brandId], references: [id])
  client    Client?   @relation(fields: [clientId], references: [id])
  creator   User      @relation(fields: [createdBy], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[]
  businessDocuments BusinessDocument[]
  aiTasks AITask[]
  @@map("ai_assistants")
}

model Brand {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        String?
  website     String?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant       Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  aiAssistants AIAssistant[]
  leadAgents   LeadAgent[]
  @@map("brands")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String
  company     String?
  phone       String?
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant       Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  aiAssistants AIAssistant[]
  @@map("clients")
}

model ChatSession {
  id            String   @id @default(cuid())
  title         String?
  assistantId   String
  userId        String
  tenantId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  assistant AIAssistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]
  @@map("chat_sessions")
}

model ChatMessage {
  id            String          @id @default(cuid())
  sessionId     String
  role          ChatMessageRole
  content       String
  metadata      String?
  createdAt     DateTime        @default(now())
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  @@map("chat_messages")
}

model BusinessDocument {
  id          String   @id @default(cuid())
  name        String
  type        String
  content     String?
  fileUrl     String?
  fileSize    Int?
  metadata    String?
  assistantId String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assistant AIAssistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@map("business_documents")
}

model AITask {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  assistantId String
  userId      String
  tenantId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assistant AIAssistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@map("ai_tasks")
}

// Lead Finder Agent Models
model LeadAgent {
  id          String   @id @default(cuid())
  name        String
  description String?
  keywords    String   // JSON array of keywords
  locations   String?  // JSON array of locations
  sources     String   // JSON array of sources to monitor
  isActive    Boolean  @default(true)
  confidenceThreshold Int @default(80)
  notificationSettings String? // JSON settings for notifications
  createdBy   String
  tenantId    String
  brandId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator   User      @relation(fields: [createdBy], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  brand     Brand?    @relation(fields: [brandId], references: [id])
  leads     Lead[]
  notifications LeadNotification[]

  @@map("lead_agents")
}

model Lead {
  id          String   @id @default(cuid())
  title       String
  description String?
  leadType    LeadType
  serviceNeeded String?
  urgency     LeadUrgency
  location    String?
  sourceUrl   String?
  source      LeadSource
  confidenceScore Float
  status      LeadStatus @default(NEW)
  metadata    String?   // JSON additional data
  agentId     String
  tenantId    String
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  agent     LeadAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedUser User?  @relation(fields: [assignedTo], references: [id])

  @@map("leads")
}

model LeadNotification {
  id          String   @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  isRead      Boolean  @default(false)
  sentAt      DateTime @default(now())
  agentId     String
  leadId      String?
  tenantId    String
  userId      String

  // Relations
  agent     LeadAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@map("lead_notifications")
}

enum Role {
  ADMIN
  USER
}

enum ChatMessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Lead Finder Agent Enums
enum LeadType {
  SERVICE_REQUEST
  INQUIRY
  COMPLAINT
  RECOMMENDATION
  GENERAL
}

enum LeadUrgency {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadSource {
  FACEBOOK_GROUPS
  REDDIT
  TWITTER
  GUMTREE
  AIRTASKER
  LINKEDIN
  CUSTOM
}

enum LeadStatus {
  NEW
  CONTACTED
  FOLLOWED_UP
  QUALIFIED
  CLOSED
  LOST
}

enum NotificationType {
  NEW_LEAD
  HIGH_CONFIDENCE
  URGENT_LEAD
  SYSTEM_ALERT
}

// Cold Call Scraper Models
model ScrapeJob {
  id          String   @id @default(cuid())
  name        String
  industry    String
  location    String
  status      ScrapeJobStatus @default(PENDING)
  progress    Int      @default(0) // 0-100
  totalResults Int?
  errorMessage String?
  startedAt   DateTime?
  completedAt DateTime?
  createdBy   String
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator   User         @relation(fields: [createdBy], references: [id])
  tenant    Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  leads     BusinessLead[]

  @@map("scrape_jobs")
}

model BusinessLead {
  id          String   @id @default(cuid())
  businessName String
  industry    String
  location    String
  email       String?
  phone       String?
  website     String?
  address     String?
  category    String?
  tags        String?  // JSON array of tags
  source      ScrapeSource
  status      LeadStatus @default(NEW)
  notes       String?
  metadata    String?  // JSON additional data
  scrapeJobId String?
  tenantId    String
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  scrapeJob   ScrapeJob? @relation(fields: [scrapeJobId], references: [id])
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedUser User?     @relation(fields: [assignedTo], references: [id])

  @@map("business_leads")
}

// Cold Call Scraper Enums
enum ScrapeJobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ScrapeSource {
  GOOGLE_MAPS
  YELP
  YELLOW_PAGES
  LINKEDIN
  CUSTOM
}
